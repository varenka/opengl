/*SDL_Init(SDL_INIT_EVERYTHING);

    ///set color mode to 32bps
    SDL_GL_SetAttribute(SDL_GL_RED_SIZE, 8);
    SDL_GL_SetAttribute(SDL_GL_GREEN_SIZE, 8);
    SDL_GL_SetAttribute(SDL_GL_BLUE_SIZE, 8);
    SDL_GL_SetAttribute(SDL_GL_ALPHA_SIZE, 8);
    SDL_GL_SetAttribute(SDL_GL_BUFFER_SIZE, 32);
    //SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 16);
    ///set double buffered to true
    SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);*/

    /*SDL_Window* window = SDL_CreateWindow("It works!", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 800, 600, SDL_WINDOW_OPENGL);
    SDL_GLContext glContext = SDL_GL_CreateContext(window);

    GLenum status = glewInit();

    if(status != GLEW_OK)
    {
        cout << "Glew failed to initialize" << endl;
        return 0;
    }*/

    /*const float vertexColors[] = {
        1.0f,  1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f, 1.0f
    };*/

    /*const GLfloat vertices[] = {
         0.0f,  0.5f, 1.0f, 1.0f, 0.0f, 0.0f,
         0.5f, -0.5f, 1.0f, 0.0f, 1.0f, 0.0f,
        -0.5f, -0.5f, 1.0f, 0.0f, 0.0f, 1.0f
    };*/


    const GLfloat vertices[] = {
        -0.5f,  0.5f, 1.0f, 1.0f, 0.0f, 0.0f, // Top-left
        0.5f,  0.5f, 1.0f, 0.0f, 1.0f, 0.0f, // Top-right
        0.5f, -0.5f, 1.0f, 0.0f, 0.0f, 1.0f, // Bottom-right
        -0.5f, -0.5f, 1.0f, 1.0f, 1.0f, 1.0f  // Bottom-left
    };

    GLuint vbo;
    glGenBuffers(1, &vbo);

    ///make vbo the active object
    glBindBuffer(GL_ARRAY_BUFFER, vbo);

    ///copy the data from verticies[] into the active array buffer
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

    bool isClosed = false;

    glDrawArrays(GL_TRIANGLES, 0, 3);

    string vertexShaderSource = LoadFile("./res/basicShader.vs");
    string fragmentShaderSource = LoadFile("./res/basicShader.fs");

    ///vertex shader
    GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);
    ///upload shader source
    const GLchar* vertexShaderChar = vertexShaderSource.c_str();
    glShaderSource(vertexShader, 1, &vertexShaderChar, NULL);
    ///compile
    glCompileShader(vertexShader);
    ///error checking
    checkShaderError(vertexShader);

    ///fragment shader
    GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
    ///upload shader source
    const GLchar* fragmentShaderChar = fragmentShaderSource.c_str();
    glShaderSource(fragmentShader, 1, &fragmentShaderChar, NULL);
    ///compile
    glCompileShader(fragmentShader);
    ///error checking
    checkShaderError(fragmentShader);

    ///shader program
    GLuint shaderProgram = glCreateProgram();
    glAttachShader(shaderProgram, vertexShader);
    glAttachShader(shaderProgram, fragmentShader);

    ///this defines which buffers the
    ///fragment shader writes to, 0 by default
    glBindFragDataLocation(shaderProgram, 0, "outColor");

    ///linking shaders
    glLinkProgram(shaderProgram);
    ///start using shaderProgram
    glUseProgram(shaderProgram);

    ///give position the input location of 0
    ///(the variable position will have
    ///a location of 0 in the input)
    GLint posAttrib = glGetAttribLocation(shaderProgram, "position");
    ///enable the position attribute array
    glEnableVertexAttribArray(posAttrib);
    ///arguments: input, number of values in that input,
    ///type of each component, should they be
    ///normalized, how many bytes between each
    ///attribute in the array (0 means no other data
    ///between elements), offset
    glVertexAttribPointer(posAttrib, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), 0);

    ///setup color vertex attrib
    GLint colAttrib = glGetAttribLocation(shaderProgram, "color");
    glEnableVertexAttribArray(colAttrib);
    glVertexAttribPointer(colAttrib, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float),
                          (void*)(3 * sizeof(float)));
    ///setup uniform variable triangleColor
    //GLint uniColor = glGetUniformLocation(shaderProgram, "triangleColor");
    //glUniform3f(uniColor, 1.0f, 0.0f, 0.0f);

    ///setup element array buffer
    GLuint elements[] = {
        0, 1, 2,
        2, 3, 0,
    };

    GLuint ebo;
    glGenBuffers(1, &ebo);

    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ebo);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER,
        sizeof(elements), elements, GL_STATIC_DRAW);

